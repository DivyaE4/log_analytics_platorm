version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - log-analytics-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - log-analytics-network

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    volumes:
      - ./init-kafka.sh:/init-kafka.sh
    command: "bash /init-kafka.sh"
    networks:
      - log-analytics-network

  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: loguser
      POSTGRES_PASSWORD: 1803
      POSTGRES_DB: loganalytics
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - log-analytics-network

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: fastapi-api
    ports:
      - "8000:8000"
    depends_on:
      - kafka
    networks:
      - log-analytics-network

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: kafka-consumer
    depends_on:
      - kafka
      - postgres
    networks:
      - log-analytics-network

  simulator:
    build:
      context: .
      dockerfile: Dockerfile.simulator
    container_name: workload-simulator
    depends_on:
      - api
    networks:
      - log-analytics-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - postgres
    networks:
      - log-analytics-network

networks:
  log-analytics-network:
    driver: bridge

volumes:
  postgres_data:
  grafana_data: